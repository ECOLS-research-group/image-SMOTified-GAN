import os
import numpy as np
from keras.preprocessing.image import ImageDataGenerator
from imblearn.over_sampling import SMOTE
import cv2

# Define the path to the directory containing the image files
dir_path = 'C:\\Users\\singh\\OneDrive\\Documents\\Projects\\SMOTified-GAN-Image\\data\\xray\\train'

# Define the size of the images
new_size = (1000, 1000)

# Define the path to the directory where the new images will be saved
new_dir_path = 'C:\\Users\\singh\\OneDrive\\Documents\\Projects\\SMOTified-GAN-Image\\data\\xray\\generated'

# Load the image data using Keras
datagen = ImageDataGenerator(rescale=1./255)
train_generator = datagen.flow_from_directory(
        dir_path,
        target_size=new_size,
        batch_size=32,
        class_mode='categorical')

# Convert the images to numpy arrays
images, labels = train_generator.next()

# Get the class labels for each image
class_labels = np.argmax(labels, axis=1)

# Get the indices of the minority class
minority_class = [c for c, count in enumerate(np.bincount(class_labels)) if count < np.max(np.bincount(class_labels))]

# Get the images and labels of the minority class
minority_images = images[class_labels == minority_class[0]]
minority_labels = labels[class_labels == minority_class[0]]

# Reshape the images to 2D arrays
height, width, channels = minority_images[0].shape
minority_images_2d = minority_images.reshape(minority_images.shape[0], height, width, channels)

# Flatten the images to 1D arrays
minority_images_flat = minority_images_2d.reshape(minority_images_2d.shape[0], -1)

# Apply SMOTE to generate new images for the minority class
smote = SMOTE()
new_minority_images_flat, new_minority_labels = smote.fit_resample(minority_images_flat, minority_labels)

# Reshape the new images to 2D arrays
new_minority_images = new_minority_images_flat.reshape(new_minority_images_flat.shape[0], height, width, channels)

# Clip the pixel values to the range [0, 1]
new_minority_images = np.clip(new_minority_images, 0, 1)

# Create the directory to save the new images
if not os.path.exists(new_dir_path):
    os.makedirs(new_dir_path)

# Save the new images generated by SMOTE to disk
for i in range(len(new_minority_images)):
    img = new_minority_images[i]
    label = new_minority_labels[i]
    filename = os.path.join(new_dir_path, 'label_%d_new_image_%d.jpg' % (label, i))
    cv2.imwrite(filename, img * 255)
